(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{378:function(s,a,n){"use strict";n.r(a);var t=n(19),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"指针和引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#指针和引用"}},[s._v("#")]),s._v(" 指针和引用")]),s._v(" "),n("h2",{attrs:{id:"指针和引用区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#指针和引用区别"}},[s._v("#")]),s._v(" 指针和引用区别")]),s._v(" "),n("ol",[n("li",[s._v("指针可以为空，引用不行")]),s._v(" "),n("li",[s._v("指针可以不初始化，引用必须初始化")]),s._v(" "),n("li",[s._v("指针所指可以改变，引用初始化后所指不可改变（因为是指针常量）")]),s._v(" "),n("li",[s._v("指针和引用的"),n("code",[s._v("++")]),s._v("意义不同")]),s._v(" "),n("li",[s._v("指针sizeof得到指针大小，引用sizeof得到类型大小")])]),s._v(" "),n("h2",{attrs:{id:"引用的底层"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#引用的底层"}},[s._v("#")]),s._v(" 引用的底层")]),s._v(" "),n("ol",[n("li",[s._v("引用是个指针常量"),n("code",[s._v("int* const ra =&a")])]),s._v(" "),n("li",[s._v("通过汇编可看出引用其实是个指针\n"),n("ol",[n("li",[s._v("lea 了一个地址\n"),n("ol",[n("li",[s._v("mov 会解地址，实际移动的为值")]),s._v(" "),n("li",[s._v("lea 不会解地址，直接赋值地址")])])]),s._v(" "),n("li",[s._v("大小为8B，（64bits machine）")]),s._v(" "),n("li",[s._v("另外a的地址为数据rbp-数据总大小（包含padding）")]),s._v(" "),n("li",[s._v("使用"),n("code",[s._v("int *pa=&a")]),s._v(" 得到相同的汇编")]),s._v(" "),n("li",[s._v("使用"),n("code",[s._v("const")]),s._v("也得到相同汇编")])])])]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("ra "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("div",{staticClass:"language-x86asm line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("gdb> disassemble /m\nDump of assembler code for function main():\n1\tint main() {\n   0x0000555555555125 <+0>:\tpush   %rbp\n   0x0000555555555126 <+1>:\tmov    %rsp,%rbp\n\n2\t  int a = 1;\n=> 0x0000555555555129 <+4>:\tmovl   $0x1,-0x14(%rbp)\n\n3\t  int b = a;\n   0x0000555555555130 <+11>:\tmov    -0x14(%rbp),%eax\n   0x0000555555555133 <+14>:\tmov    %eax,-0x4(%rbp)\n\n4\t  int &ra = a;\n   0x0000555555555136 <+17>:\tlea    -0x14(%rbp),%rax\n   0x000055555555513a <+21>:\tmov    %rax,-0x10(%rbp)\n\n5\t  return 0;\n   0x000055555555513e <+25>:\tmov    $0x0,%eax\n\n6\t}\n   0x0000555555555143 <+30>:\tpop    %rbp\n   0x0000555555555144 <+31>:\tretq   \n\nEnd of assembler dump.\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);