(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{387:function(e,r,s){e.exports=s.p+"assets/img/envlist.bd8e34df.jpg"},388:function(e,r,s){e.exports=s.p+"assets/img/cstorage.76ae9f7a.jpg"},389:function(e,r,s){e.exports=s.p+"assets/img/terminate.768fe54c.jpg"},422:function(e,r,s){"use strict";s.r(r);var i=s(19),t=Object(i.a)({},(function(){var e=this,r=e.$createElement,i=e._self._c||r;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"unix-process"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#unix-process"}},[e._v("#")]),e._v(" Unix Process")]),e._v(" "),i("h2",{attrs:{id:"process-environment"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#process-environment"}},[e._v("#")]),e._v(" Process Environment")]),e._v(" "),i("ol",[i("li",[e._v("command line args "),i("code",[e._v("int argc, char **argv")]),e._v(" "),i("ol",[i("li",[i("code",[e._v("argv[0]")]),e._v(" == program name")]),e._v(" "),i("li",[i("code",[e._v("argv[argc] == nullptr")])])])]),e._v(" "),i("li",[e._v("environment table"),i("br"),e._v(" "),i("img",{attrs:{src:s(387),alt:"env list"}}),e._v(" "),i("ol",[i("li",[e._v("Each process has a environment list, point by "),i("code",[e._v("extern char **environ")])]),e._v(" "),i("li",[e._v("env list is a array of char*, each pointer contains a c string end with \\0")])])]),e._v(" "),i("li",[e._v("C program"),i("br"),e._v(" "),i("img",{attrs:{src:s(388),alt:"C program memory layout"}})]),e._v(" "),i("li",[e._v("process can only have limitted resource")])]),e._v(" "),i("h2",{attrs:{id:"process-control"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#process-control"}},[e._v("#")]),e._v(" Process Control")]),e._v(" "),i("ol",[i("li",[e._v("Each process has unique PID (Delay Multiplexing)")]),e._v(" "),i("li",[e._v("PID==0 swapper/scheduler process, PID==1 init process")]),e._v(" "),i("li",[e._v("fork()\n"),i("ol",[i("li",[e._v("One fork() call return twice, parent return cild pid, cild return 0")]),e._v(" "),i("li",[e._v("Child copy parent's data, heap, stack, only share program text")]),e._v(" "),i("li",[e._v("Copy-on-Write means child does not copy all fields until parent or child want to modify a filed")]),e._v(" "),i("li",[e._v("Parent's file table is copyed to child, the file offset is shared")])])]),e._v(" "),i("li",[e._v("vfork()\n"),i("ol",[i("li",[e._v("Aims on exec() other program in child. Promise child run firstly and parent run after child finish")]),e._v(" "),i("li",[e._v("Child shares parent's address")])])]),e._v(" "),i("li",[e._v("clone()\n"),i("ol",[i("li",[e._v("Copy parent's resource selectly")]),e._v(" "),i("li",[e._v("To achieve thread")])])]),e._v(" "),i("li",[e._v("process end\n"),i("img",{attrs:{src:s(389),alt:"terminate"}})])]),e._v(" "),i("h2",{attrs:{id:"process-relation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#process-relation"}},[e._v("#")]),e._v(" Process Relation")]),e._v(" "),i("ol",[i("li",[e._v("Orphan process\n"),i("ol",[i("li",[e._v("whose parent is finished")]),e._v(" "),i("li",[e._v("orphan process's parent becomes to init")])])]),e._v(" "),i("li",[e._v("Zombie process\n"),i("ol",[i("li",[e._v("Who is finished but its parent does not handle the finish,i.e. dose not call wait()")]),e._v(" "),i("li",[e._v("It still occupy pid")]),e._v(" "),i("li",[e._v("Can use twice fork() to avoid zombie. First child -> fork() second child -> second child run program -> first child exit directly -> second child adopt by init")]),e._v(" "),i("li",[e._v("Can kill zombie's parent to solve zombie process")])])])])])}),[],!1,null,null,null);r.default=t.exports}}]);