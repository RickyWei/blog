(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{377:function(t,s,a){"use strict";a.r(s);var n=a(19),i=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"network"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#network"}},[t._v("#")]),t._v(" Network")]),t._v(" "),a("h2",{attrs:{id:"网络模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络模型"}},[t._v("#")]),t._v(" 网络模型")]),t._v(" "),a("ol",[a("li",[t._v("OSI七层，TCP/IP四层，普通五层"),a("img",{attrs:{src:"imgnet/networklayer.jpg",alt:"network layer"}})])]),t._v(" "),a("h2",{attrs:{id:"dns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dns"}},[t._v("#")]),t._v(" dns")]),t._v(" "),a("ol",[a("li",[t._v("dns采用udp，端口53")]),t._v(" "),a("li",[t._v("dns查询分递归查询和迭代查询")])]),t._v(" "),a("h2",{attrs:{id:"http请求和响应格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http请求和响应格式"}},[t._v("#")]),t._v(" http请求和响应格式")]),t._v(" "),a("ol",[a("li",[t._v("http请求"),a("img",{attrs:{src:"imgnet/req-message.png",alt:"request header"}})]),t._v(" "),a("li",[t._v("http响应"),a("img",{attrs:{src:"imgnet/res-message.png",alt:"response header"}})])]),t._v(" "),a("h2",{attrs:{id:"http状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http状态码"}},[t._v("#")]),t._v(" http状态码")]),t._v(" "),a("ol",[a("li",[t._v("1xx 提示信息，一种中间状态，使用较少")]),t._v(" "),a("li",[t._v("2xx 成功\n"),a("ol",[a("li",[t._v("200 OK")]),t._v(" "),a("li",[t._v("204 No Content")]),t._v(" "),a("li",[t._v("206 Partial Content")])])]),t._v(" "),a("li",[t._v("3xx 重定向\n"),a("ol",[a("li",[t._v("301 Moved Permanently")]),t._v(" "),a("li",[t._v("302 Found")]),t._v(" "),a("li",[t._v("304 Not Modified")])])]),t._v(" "),a("li",[t._v("4xx 客户端错误\n"),a("ol",[a("li",[t._v("400 Bad Request")]),t._v(" "),a("li",[t._v("403 Forbidden")]),t._v(" "),a("li",[t._v("404 Not Found")])])]),t._v(" "),a("li",[t._v("5xx 服务端错误\n"),a("ol",[a("li",[t._v("500 Internal Server Error")]),t._v(" "),a("li",[t._v("501 Not Implemented")]),t._v(" "),a("li",[t._v("502 Bad Gateway")]),t._v(" "),a("li",[t._v("503 Service Unavailable")])])])]),t._v(" "),a("h2",{attrs:{id:"http方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http方法"}},[t._v("#")]),t._v(" http方法")]),t._v(" "),a("ol",[a("li",[t._v("GET方法请求一个指定资源的表示形式. 使用GET的请求应该只被用于获取数据")]),t._v(" "),a("li",[t._v("HEAD方法请求一个与GET请求的响应相同的响应，但没有响应体")]),t._v(" "),a("li",[t._v("POST方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用")]),t._v(" "),a("li",[t._v("PUT方法用请求有效载荷替换目标资源的所有当前表示")]),t._v(" "),a("li",[t._v("DELETE方法删除指定的资源")]),t._v(" "),a("li",[t._v("OPTIONS方法用于描述目标资源的通信选项")]),t._v(" "),a("li",[t._v("TRACE方法沿着到目标资源的路径执行一个消息环回测试")]),t._v(" "),a("li",[t._v("PATCH方法用于对资源应用部分修改")])]),t._v(" "),a("h2",{attrs:{id:"http-0-9-1-0-1-1-2-0-3-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-0-9-1-0-1-1-2-0-3-0"}},[t._v("#")]),t._v(" http 0.9 1.0 1.1 2.0 3.0")]),t._v(" "),a("ol",[a("li",[t._v("0.9\n"),a("ol",[a("li",[t._v("仅有请求行，没有请求头和请求体；服务器返回没有响应头，仅有html文档")]),t._v(" "),a("li",[t._v("仅支持get和ascii字节流")])])]),t._v(" "),a("li",[t._v("1.0\n"),a("ol",[a("li",[t._v("引入请求头和响应体")]),t._v(" "),a("li",[t._v("请求头中加入了 状态码 字段，通过响应行的方式来通知浏览器更新状态码")]),t._v(" "),a("li",[t._v("引入 Cache 缓存机制，用来缓存已经下载过的数据")]),t._v(" "),a("li",[t._v("在请求头中加入了 用户代理 字段，用来统计客户端数据")]),t._v(" "),a("li",[t._v("问题\n"),a("ol",[a("li",[t._v("每次 http 通信都需要建立 tcp 连接、http 传输和 断开 tcp 连接三个阶段，在传输数据越来越大的情况下花费了过大的性能开销")]),t._v(" "),a("li",[t._v("每个域名只能绑定唯一的 IP 地址，一个服务器只能支持一个域名")]),t._v(" "),a("li",[t._v("需要在响应头设置完整的数据大小（Content-Length: 901）方便浏览器根据数据大小来接受数据。所以在传输动态数据时会导致浏览器不知道数据何时传输结束")])])])])]),t._v(" "),a("li",[t._v("1.1\n"),a("ol",[a("li",[t._v("增加持久连接（Connection:keep-alive\\close），在一个 tcp 连接之上可以传输多个 http 请求，直到浏览器或者服务器明确要断开 tcp 连接为止（浏览器默认开启，对于同一域名，最多同时支持 6 个 tcp 持久连接，每个 tcp 连接同时只能发起一个 http 请求）")]),t._v(" "),a("li",[t._v("提供虚拟主机的支持，在一台单独的物理服务器中绑定多个虚拟主机，这些主机共用同一 IP 地址，并且在请求头中增加 Host 字段告诉物理服务器，真正请求的是机子上的那个虚拟机中的服务")]),t._v(" "),a("li",[t._v("通过引入 Chunk transfer 机制解决传输动态数据导致的问题，通过将数据分割传输，每个数据块的传输时附加上一次的数据块的长度（Content-Length: 0），如果为 0 时则表示传输完毕")]),t._v(" "),a("li",[t._v("问题\n"),a("ol",[a("li",[t._v("同时开启多条 tcp 连接，竞争固定带宽，且 tcp 无法确定哪些需要优先下载的关键资源")]),t._v(" "),a("li",[t._v("队头阻塞（在使用 tcp 持久连接时，多个 http 请求共用一个 tcp 连接管道，但是同一 tcp 连接管道中同时只能处理一个 http 请求，后续的需要排队等待管道队头的请求处理完毕）")])])])])]),t._v(" "),a("li",[t._v("2.0\n"),a("ol",[a("li",[t._v("使用同一域名单 tcp 连接来规避 tcp 的慢启动和多连接竞争带宽的问题")]),t._v(" "),a("li",[t._v("使用多路复用机制实现资源的并行请求来解决 http/1.1 的 http 层级的队头阻塞问题（无法解决 tcp 数据包层级的队头阻塞）")]),t._v(" "),a("li",[t._v("在 http 和 tcp 层中间引入了二进制分帧层将 http 的请求数据拆分成带有 http 请求 ID 的多个 tcp 数据帧，服务器接收完所有该时刻同时发送的所有 http 请求的所有帧后（如何判断已经接收完了该 http 请求的所有帧），拼接 tcp 数据帧成一个完成的 http 请求，然后处理响应数据"),a("img",{attrs:{src:"imgnet/http2.jpg",alt:"http2 io"}})]),t._v(" "),a("li",[t._v("问题\n"),a("ol",[a("li",[t._v("tcp 层级的队头阻塞\n"),a("ol",[a("li",[t._v("http/2 中，一个域名的多个请求经过二进制分帧层处理的后的 n 多个 tcp 数据包共用一个 tcp 连接管道进行传输，如果任意一个 tcp 数据包丢失则会暂停该 tcp 管道，等待丢失的包重新传输，此时就会阻塞所有请求")]),t._v(" "),a("li",[t._v("http/1.1 会为每个域名同时开启最多 6 个 tcp 连接，即使一个 tcp 阻塞了，不会阻塞其他请求")])])]),t._v(" "),a("li",[t._v("tcp 协议僵化（操作系统不能及时更新协议）")]),t._v(" "),a("li",[t._v("中间设备的僵化（更新tcp协议使得旧的传输设备无法解析，导致丢弃）")])])])])]),t._v(" "),a("li",[t._v("3.0\n"),a("ol",[a("li",[t._v("基于udp实现quic"),a("img",{attrs:{src:"imgnet/quic.jpg",alt:"quic"}})])])])]),t._v(" "),a("h2",{attrs:{id:"cokie和session"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cokie和session"}},[t._v("#")]),t._v(" cokie和session")]),t._v(" "),a("h2",{attrs:{id:"https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" https")]),t._v(" "),a("ol",[a("li",[t._v("https流程"),a("img",{attrs:{src:"imgnet/https.png",alt:"https"}}),t._v(" "),a("ol",[a("li",[t._v("client hello\n"),a("ol",[a("li",[t._v("客户端支持的 SSL/TLS 协议版本")]),t._v(" "),a("li",[t._v("客户端生产的随机数（Client Random），后面用于生产「会话秘钥」")]),t._v(" "),a("li",[t._v("客户端支持的密码套件列表，如 RSA 加密算法")])])]),t._v(" "),a("li",[t._v("server hello\n"),a("ol",[a("li",[t._v("确认 SSL/ TLS 协议版本，如果浏览器不支持，则关闭加密通信")]),t._v(" "),a("li",[t._v("服务器生产的随机数（Server Random），后面用于生产「会话秘钥」")]),t._v(" "),a("li",[t._v("确认的密码套件列表，如 RSA 加密算法")]),t._v(" "),a("li",[t._v("服务器的数字证书")])])]),t._v(" "),a("li",[t._v("客户端回应\n"),a("ol",[a("li",[t._v("验证证书，若成功则进行一下步骤")]),t._v(" "),a("li",[t._v("一个随机数（pre-master key）该随机数会被服务器公钥加密")]),t._v(" "),a("li",[t._v("加密通信算法改变通知，表示随后的信息都将用「会话秘钥」加密通信")]),t._v(" "),a("li",[t._v("客户端握手结束通知，表示客户端的握手阶段已经结束，这一项同时把之前所有内容的发生的数据做个摘要，用来供服务端校验")])])]),t._v(" "),a("li",[t._v("服务器最后回应\n"),a("ol",[a("li",[t._v("加密通信算法改变通知，表示随后的信息都将用「会话秘钥」加密通信")]),t._v(" "),a("li",[t._v("服务器握手结束通知，表示服务器的握手阶段已经结束，这一项同时把之前所有内容的发生的数据做个摘要，用来供客户端校验")])])])])]),t._v(" "),a("li",[t._v("https加密算法\n"),a("ol",[a("li",[t._v("使用非堆成加密RSA加密会话密钥")]),t._v(" "),a("li",[t._v("后续使用加密后密钥对内容进行对称加密，如DES")]),t._v(" "),a("li",[t._v("两种加米权衡了安全和效率")])])]),t._v(" "),a("li",[t._v("CA（证书认证机构）\n"),a("ol",[a("li",[t._v("证书的签发和验证"),a("img",{attrs:{src:"imgnet/ca.jpg",alt:"ca"}}),t._v(" "),a("ol",[a("li",[t._v("Signing阶段，首先撰写证书的元信息：签发人(Issuer)、地址、签发时间、过期失效等；当然，这些信息中还包含证书持有者(owner)的基本信息，例如owner的DN(DNS Name，即证书生效的域名)，owner的公钥等基本信息。")]),t._v(" "),a("li",[t._v("通过通用的Hash算法将信息摘要提取出来；")]),t._v(" "),a("li",[t._v("Hash摘要通过Issuer(CA)私钥进行非对称加密，生成一个签名密文；")]),t._v(" "),a("li",[t._v("将签名密文attach到文件证书上，使之变成一个签名过的证书")])])]),t._v(" "),a("li",[t._v("浏览器和操作系统内置了信任的ca的公钥，用于验证证书")]),t._v(" "),a("li",[t._v("证书链\n"),a("ol",[a("li",[t._v("ca其实是一个层级关系，可以链式查询上层的的ca是否合法")])])])])])]),t._v(" "),a("h2",{attrs:{id:"udp头部"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#udp头部"}},[t._v("#")]),t._v(" udp头部")]),t._v(" "),a("ol",[a("li",[t._v("udp头部"),a("img",{attrs:{src:"imgnet/udpheader.jpg",alt:"udp header"}})])]),t._v(" "),a("h2",{attrs:{id:"tcp封包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp封包"}},[t._v("#")]),t._v(" tcp封包")]),t._v(" "),a("ol",[a("li",[a("img",{attrs:{src:"imgnet/encapsulation.png",alt:"capsulation"}})])]),t._v(" "),a("h2",{attrs:{id:"tcp头部"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp头部"}},[t._v("#")]),t._v(" tcp头部")]),t._v(" "),a("ol",[a("li",[t._v("tcp头部"),a("img",{attrs:{src:"imgnet/tcpheader.jpg",alt:"tcp header"}}),t._v(" "),a("ol",[a("li",[t._v("5 <= data offset <= 15，单位32-bits words，tcp最小20B最大60B=20B+40B选项")])])]),t._v(" "),a("li",[t._v("tcp options"),a("img",{attrs:{src:"imgnet/tcpoptions.png",alt:"tcp options"}})])]),t._v(" "),a("h2",{attrs:{id:"tcp状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp状态"}},[t._v("#")]),t._v(" tcp状态")]),t._v(" "),a("ol",[a("li",[a("img",{attrs:{src:"imgnet/Tcp_state_diagram_fixed_new.svg.png",alt:"tcp state"}})])]),t._v(" "),a("h2",{attrs:{id:"tcp三次握手和四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp三次握手和四次挥手"}},[t._v("#")]),t._v(" tcp三次握手和四次挥手")]),t._v(" "),a("ol",[a("li",[t._v("3此握手4次挥手"),a("img",{attrs:{src:"imgnet/synfin.jpg",alt:"handshake handwave"}})]),t._v(" "),a("li",[t._v("为什么3次握手\n"),a("ol",[a("li",[t._v("防止重复的历史连接；如果是历史连接到达服务端，服务端返回ack后客户端根据自己的上下文（序列号或时间）判断出该连接非本次连接，发送RST给服务端终止")]),t._v(" "),a("li",[t._v("同步初始化双方序列号；两次握手进能保证一方的seq被成功接收")]),t._v(" "),a("li",[t._v("避免资源浪费；两次握手若客户端发送syn后未收到ack，会重新发送，服务端因为无法知道客户端是否已经收到ack，导致每个syn都会建立一个连接产生多个无效连接")])])]),t._v(" "),a("li",[t._v("为什么四次挥手\n"),a("ol",[a("li",[t._v("tcp是全双工的，任何一方可以关闭单方向的数据传输")])])]),t._v(" "),a("li",[t._v("为什么有time_wait并等待2MSL\n"),a("ol",[a("li",[t._v("MSL是报文最大生存时间，2MSL保证本次连接（由ip:port四元组确定）的数据包在网络中消失，因为下次连接可能使用相同的四元组")]),t._v(" "),a("li",[t._v("保证被动关闭方能收到fin的ack；被动关闭方超时未收到ack重发，这次重发一个来回的时间 <= 2MSL；主动关闭方每次收到fin重启2MSL计时")])])])]),t._v(" "),a("h2",{attrs:{id:"tcp可靠传输"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp可靠传输"}},[t._v("#")]),t._v(" tcp可靠传输")]),t._v(" "),a("ol",[a("li",[t._v("校验和\n"),a("ol",[a("li",[t._v("tcp伪头部"),a("img",{attrs:{src:"imgnet/tcppseudoheader.jpg",alt:"tcp pseudo header"}})]),t._v(" "),a("li",[t._v("计算校验和时使用伪首部，伪首部仅用来计算校验和，并不真正传递")])])]),t._v(" "),a("li",[t._v("seq和ack机制")]),t._v(" "),a("li",[t._v("重传\n"),a("ol",[a("li",[t._v("超时重传\n"),a("ol",[a("li",[t._v("RTT（Round-Trip Time）数据包往返时间，从发送开始计时到收到ACK")]),t._v(" "),a("li",[t._v("RTO（Retransmission Timeout）略大于RTT")]),t._v(" "),a("li",[t._v("较小RTO可能导致频繁重发，增加网络拥塞又导致更多重发；较大RTO重发时间慢没有效率")]),t._v(" "),a("li",[t._v("如果超时重发的数据再次超时，超时时间间隔加倍")])])]),t._v(" "),a("li",[t._v("快重传\n"),a("ol",[a("li",[t._v("收到连续三个相同ACK就重传，不必等待超时"),a("img",{attrs:{src:"imgnet/fast.png",alt:"fast retransmission"}})]),t._v(" "),a("li",[t._v("SACK可确定是仅重传部分还是所有都需要重传"),a("img",{attrs:{src:"imgnet/sack.png",alt:"SACK"}}),t._v(" "),a("ol",[a("li",[t._v("在TCP头部的选项字段中添加SACK，可将已缓存的数据信息发送给对方")]),t._v(" "),a("li",[t._v("SACK kind=4，用于告知对方本方是否支持SACK，可在握手时添加该选项；SACK kind=5用于数据传输")]),t._v(" "),a("li",[t._v("SACK选项本身占2B（kind+length）；后面每个块占8B（两个32位数标识未确认的seq的范围）")]),t._v(" "),a("li",[t._v("D-SACK用来区分到底是数据丢失还是ACK丢失\n"),a("ol",[a("li",[t._v("如果SACK的第一个段的范围被ACK所覆盖，那么就是D-SACK")]),t._v(" "),a("li",[t._v("如果SACK的第一个段的范围被SACK的第二个段覆盖，那么就是D-SACK")])])])])])])])])])]),t._v(" "),a("h2",{attrs:{id:"tcp流量控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp流量控制"}},[t._v("#")]),t._v(" tcp流量控制")]),t._v(" "),a("ol",[a("li",[t._v("滑动窗口\n"),a("ol",[a("li",[t._v("tcp头部有window size字段，告知对方自己可接受的最大数据量")]),t._v(" "),a("li",[t._v("发送方的滑动窗口\n"),a("ol",[a("li",[t._v("已发送已ack")]),t._v(" "),a("li",[t._v("已发送未ack")]),t._v(" "),a("li",[t._v("未发送（因为超过接收方窗口大小）")])])]),t._v(" "),a("li",[t._v("接收方的滑动窗口\n"),a("ol",[a("li",[t._v("已收到已ack")]),t._v(" "),a("li",[t._v("已收到未ack")]),t._v(" "),a("li",[t._v("未收到")])])]),t._v(" "),a("li",[t._v("当接收方窗口大小为0时，即为窗口关闭；发送方设定计时器主动探查接收方是否有可用窗口")])])]),t._v(" "),a("li",[t._v("糊涂窗口\n"),a("ol",[a("li",[t._v("即发送方仅有很小的接收空间，发送方依然发送数据，导致除去TCP+IP头部后有效载荷其实很小")]),t._v(" "),a("li",[t._v("发送端解决 -> nagle\n"),a("ol",[a("li",[t._v("当窗口大小>=MSS 或 数据大小>=MSS 发送")]),t._v(" "),a("li",[t._v("当收到之前ack时发送下一个包")])])]),t._v(" "),a("li",[t._v("接收端解决 -> delay-ack\n"),a("ol",[a("li",[t._v("当仅有ack需要发送时，则等待一段时间 200ms")]),t._v(" "),a("li",[t._v("当有响应数据要发送则立即返回ack和数据")]),t._v(" "),a("li",[t._v("当对方新包到达则立即返回上一个包的ack")])])])])])]),t._v(" "),a("h2",{attrs:{id:"tcp拥塞控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp拥塞控制"}},[t._v("#")]),t._v(" tcp拥塞控制")]),t._v(" "),a("ol",[a("li",[a("img",{attrs:{src:"imgnet/TCP_Slow-Start_and_Congestion_Avoidance.svg.png",alt:"tcp congestion control"}})]),t._v(" "),a("li",[t._v("慢启动\n"),a("ol",[a("li",[t._v("建立连接后"),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[a("mjx-math",{staticClass:" MJX-TEX"},[a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"c"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"w"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"n"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"d"}})],1),a("mjx-mo",{staticClass:"mjx-n",attrs:{space:"4"}},[a("mjx-c",{attrs:{c:"="}})],1),a("mjx-mn",{staticClass:"mjx-n",attrs:{space:"4"}},[a("mjx-c",{attrs:{c:"1"}})],1)],1)],1),t._v("在收到一个ack后"),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[a("mjx-math",{staticClass:" MJX-TEX"},[a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"c"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"w"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"n"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"d"}})],1),a("mjx-mo",{staticClass:"mjx-n",attrs:{space:"4"}},[a("mjx-c",{attrs:{c:"="}})],1),a("mjx-mi",{staticClass:"mjx-i",attrs:{space:"4"}},[a("mjx-c",{attrs:{c:"c"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"w"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"n"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"d"}})],1),a("mjx-mo",{staticClass:"mjx-n",attrs:{space:"3"}},[a("mjx-c",{attrs:{c:"2217"}})],1),a("mjx-mn",{staticClass:"mjx-n",attrs:{space:"3"}},[a("mjx-c",{attrs:{c:"2"}})],1)],1)],1)],1),t._v(" "),a("li",[t._v("当"),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[a("mjx-math",{staticClass:" MJX-TEX"},[a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"c"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"w"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"n"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"d"}})],1),a("mjx-mo",{staticClass:"mjx-n",attrs:{space:"4"}},[a("mjx-c",{attrs:{c:"2A7E"}})],1),a("mjx-mi",{staticClass:"mjx-i",attrs:{space:"4"}},[a("mjx-c",{attrs:{c:"s"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"s"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"t"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"h"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"r"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"e"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"s"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"h"}})],1),a("mjx-mo",{staticClass:"mjx-n"},[a("mjx-c",{attrs:{c:"("}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"s"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"l"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"o"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"w"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"s"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"t"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"a"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"r"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"t"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"t"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"h"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"r"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"e"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"s"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"h"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"o"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"l"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"d"}})],1),a("mjx-mo",{staticClass:"mjx-n"},[a("mjx-c",{attrs:{c:")"}})],1)],1)],1),t._v("后进入拥塞避免")],1)])]),t._v(" "),a("li",[t._v("拥塞避免\n"),a("ol",[a("li",[t._v("每收到一个ack "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[a("mjx-math",{staticClass:" MJX-TEX"},[a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"c"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"w"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"n"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"d"}})],1),a("mjx-mo",{staticClass:"mjx-n"},[a("mjx-c",{attrs:{c:"+"}})],1),a("mjx-mo",{staticClass:"mjx-n",attrs:{space:"4"}},[a("mjx-c",{attrs:{c:"="}})],1),a("mjx-mn",{staticClass:"mjx-n",attrs:{space:"4"}},[a("mjx-c",{attrs:{c:"1"}})],1),a("mjx-TeXAtom",[a("mjx-mo",{staticClass:"mjx-n"},[a("mjx-c",{attrs:{c:"/"}})],1)],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"c"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"w"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"n"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"d"}})],1)],1)],1)],1)])]),t._v(" "),a("li",[t._v("拥塞发生\n"),a("ol",[a("li",[t._v("超时重传 -> 再次从慢启动开始")]),t._v(" "),a("li",[t._v("收到3次重复ack -> 快恢复\n"),a("ol",[a("li",[t._v("收到3个重复ack说明网路不是特别拥塞；")]),t._v(" "),a("li",[t._v("在进入快恢复前"),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[a("mjx-math",{staticClass:" MJX-TEX"},[a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"c"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"w"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"n"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"d"}})],1),a("mjx-mo",{staticClass:"mjx-n",attrs:{space:"4"}},[a("mjx-c",{attrs:{c:"="}})],1),a("mjx-mi",{staticClass:"mjx-i",attrs:{space:"4"}},[a("mjx-c",{attrs:{c:"c"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"w"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"n"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"d"}})],1),a("mjx-TeXAtom",[a("mjx-mo",{staticClass:"mjx-n"},[a("mjx-c",{attrs:{c:"/"}})],1)],1),a("mjx-mn",{staticClass:"mjx-n"},[a("mjx-c",{attrs:{c:"2"}})],1),a("mjx-mo",{staticClass:"mjx-n"},[a("mjx-c",{attrs:{c:";"}})],1),a("mjx-mi",{staticClass:"mjx-i",attrs:{space:"2"}},[a("mjx-c",{attrs:{c:"s"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"s"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"t"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"h"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"r"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"e"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"s"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"h"}})],1),a("mjx-mo",{staticClass:"mjx-n",attrs:{space:"4"}},[a("mjx-c",{attrs:{c:"="}})],1),a("mjx-mi",{staticClass:"mjx-i",attrs:{space:"4"}},[a("mjx-c",{attrs:{c:"c"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"w"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"n"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"d"}})],1)],1)],1)],1),t._v(" "),a("li",[t._v("进入快恢复时，拥塞窗口"),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[a("mjx-math",{staticClass:" MJX-TEX"},[a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"c"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"w"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"n"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"d"}})],1),a("mjx-mo",{staticClass:"mjx-n",attrs:{space:"4"}},[a("mjx-c",{attrs:{c:"="}})],1),a("mjx-mi",{staticClass:"mjx-i",attrs:{space:"4"}},[a("mjx-c",{attrs:{c:"s"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"s"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"t"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"h"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"r"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"e"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"s"}})],1),a("mjx-mi",{staticClass:"mjx-i"},[a("mjx-c",{attrs:{c:"h"}})],1),a("mjx-mo",{staticClass:"mjx-n",attrs:{space:"3"}},[a("mjx-c",{attrs:{c:"+"}})],1),a("mjx-mn",{staticClass:"mjx-n",attrs:{space:"3"}},[a("mjx-c",{attrs:{c:"3"}})],1)],1)],1)],1)])])])])]),t._v(" "),a("h2",{attrs:{id:"tcp粘包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp粘包"}},[t._v("#")]),t._v(" tcp粘包")]),t._v(" "),a("ol",[a("li",[t._v("TCP 协议是基于字节流的传输层协议，其中不存在消息和数据包的概念")]),t._v(" "),a("li",[t._v("应用层协议没有使用基于长度或者基于终结符的消息边界，导致多个消息的粘连")])]),t._v(" "),a("h2",{attrs:{id:"tcp和udp区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp和udp区别"}},[t._v("#")]),t._v(" tcp和udp区别")]),t._v(" "),a("ol",[a("li",[t._v("tcp面向连接；udp无连接")]),t._v(" "),a("li",[t._v("tcp是字节流；udp是数据报")]),t._v(" "),a("li",[t._v("tcp可靠传输；udp不可靠")]),t._v(" "),a("li",[t._v("tcp有流量控制，拥塞控制；udp无")]),t._v(" "),a("li",[t._v("tcp自己分片；udp需要ip层分片")]),t._v(" "),a("li",[t._v("tcp首部开销20B；udp 8B")])]),t._v(" "),a("h2",{attrs:{id:"ip地址分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ip地址分类"}},[t._v("#")]),t._v(" ip地址分类")]),t._v(" "),a("ol",[a("li",[t._v("经典分类"),a("img",{attrs:{src:"imgnet/ipclass.jpg",alt:"ip class"}})]),t._v(" "),a("li",[t._v("特殊用途的ip"),a("img",{attrs:{src:"imgnet/ipaspecialddr.jpg",alt:"reversed ip"}})]),t._v(" "),a("li",[t._v("VLSM变长子网掩码\n"),a("ol",[a("li",[t._v("A B C类分类已经不再实用，不再区分")]),t._v(" "),a("li",[t._v("VLSM用于划分子网")]),t._v(" "),a("li",[t._v("VLSM可以将部分host号用作子网号（/25，相当于一位用作子网划分，创建两个子网）")])])]),t._v(" "),a("li",[t._v("CIDR（Classless Inter-Domain Routing）无类别域间路由\n"),a("ol",[a("li",[t._v("CIDR用于减少路由表项，伴随VLSM产生")]),t._v(" "),a("li",[t._v("route aggregation "),a("img",{attrs:{src:"imgnet/aggregation.jpg",alt:"route aggregation"}})])])])]),t._v(" "),a("h2",{attrs:{id:"子网"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子网"}},[t._v("#")]),t._v(" 子网")]),t._v(" "),a("ol",[a("li",[t._v("子网"),a("img",{attrs:{src:"imgnet/subnet.jpg",alt:"subnet"}})])]),t._v(" "),a("h2",{attrs:{id:"nat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nat"}},[t._v("#")]),t._v(" NAT")]),t._v(" "),a("ol",[a("li",[t._v("NAT"),a("img",{attrs:{src:"imgnet/nat.png",alt:"nat"}})]),t._v(" "),a("li",[t._v("nat分类\n"),a("ol",[a("li",[t._v("基础nat\n"),a("ol",[a("li",[t._v("一个ip对应一个ip，并不能减少ip数量")])])]),t._v(" "),a("li",[t._v("NAPT 网络地址端口转换\n"),a("ol",[a("li",[t._v("当内网主机访问外网时，NAT选择空闲的外网ip:port与内网ip:port对应建立表项")]),t._v(" "),a("li",[t._v("修改包的源地址为nat的源ip后发出")])])])])])]),t._v(" "),a("h2",{attrs:{id:"ip头部"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ip头部"}},[t._v("#")]),t._v(" ip头部")]),t._v(" "),a("ol",[a("li",[t._v("ip头部"),a("img",{attrs:{src:"imgnet/ipheader.jpg",alt:"ip header"}})])]),t._v(" "),a("h2",{attrs:{id:"ip分片与重组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ip分片与重组"}},[t._v("#")]),t._v(" ip分片与重组")]),t._v(" "),a("ol",[a("li",[a("img",{attrs:{src:"imgnet/ipfragment.png",alt:"ip fragmentation"}})]),t._v(" "),a("li",[t._v("分片\n"),a("ol",[a("li",[t._v("当数据大小 > MTU 时进行")]),t._v(" "),a("li",[t._v("分割后的每个包，头部基本相同（id，srcip，desip等相同，长度不同），数据被分割")])])]),t._v(" "),a("li",[t._v("重组\n"),a("ol",[a("li",[t._v("根据相同的id进行重组")]),t._v(" "),a("li",[t._v("若一个分片丢失\n"),a("ol",[a("li",[t._v("超时后所有其他分片均被丢弃")]),t._v(" "),a("li",[t._v("需要重传整个包")])])])])]),t._v(" "),a("li",[t._v("避免分片\n"),a("ol",[a("li",[t._v("tcp是由MSS = MTU - IP header - TCP header设置")]),t._v(" "),a("li",[t._v("udp手动分割，数据大小 <= 1472 = mtu 1500 - ip 20 - udp 8")])])])]),t._v(" "),a("h2",{attrs:{id:"路由表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由表"}},[t._v("#")]),t._v(" 路由表")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ route\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\ndefault         "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(".2.2        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0         UG    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" enp0s3\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(".2.0        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0         "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255.255")]),t._v(".255.0   U     "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" enp0s3\nlink-local      "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0         "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255.255")]),t._v(".0.0     U     "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" enp0s3\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".56.0    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0         "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255.255")]),t._v(".255.0   U     "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" enp0s8\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# gateway is the next hop address")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# U -> the route is up")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# G -> the route is a gateway")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# H -> the route is a host")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("h2",{attrs:{id:"路由的建立"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由的建立"}},[t._v("#")]),t._v(" 路由的建立")]),t._v(" "),a("ol",[a("li",[t._v("静态路由\n"),a("ol",[a("li",[t._v("手动设置")])])]),t._v(" "),a("li",[t._v("动态路由\n"),a("ol",[a("li",[t._v("RIP\n"),a("ol",[a("li",[t._v("采用距离向量方式")]),t._v(" "),a("li",[t._v("仅与相邻路由器交换")]),t._v(" "),a("li",[t._v("交换路由表，目的ip，最短距离，下一跳ip")]),t._v(" "),a("li",[t._v("缺点\n"),a("ol",[a("li",[t._v("无法区分非零部分是否是子网")]),t._v(" "),a("li",[t._v("可能发生环路")]),t._v(" "),a("li",[t._v("度量为16限制了网络大小")])])])])]),t._v(" "),a("li",[t._v("OSPF\n"),a("ol",[a("li",[t._v("是一个链路状态协议")])])])])])]),t._v(" "),a("h2",{attrs:{id:"路由器转发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由器转发"}},[t._v("#")]),t._v(" 路由器转发")]),t._v(" "),a("ol",[a("li",[t._v("路由器收到报文后，将报文从物理层送至链路层得到 des mac addr\n"),a("ol",[a("li",[t._v("如果是本机 mac，将报文送至网络层解析")]),t._v(" "),a("li",[t._v("非本机mac，丢弃")])])]),t._v(" "),a("li",[t._v("网络层取出 des ip\n"),a("ol",[a("li",[t._v("是本机 ip，送至传输层解析")]),t._v(" "),a("li",[t._v("非本机 ip，查找路由表，得到出口")])])]),t._v(" "),a("li",[t._v("查找路由表时\n"),a("ol",[a("li",[t._v("选路（匹配）规则\n"),a("ol",[a("li",[t._v("最长匹配原则")]),t._v(" "),a("li",[t._v("管理距离（由RIP或OSPF获取得到的表项的优先级不同，如OSPF优先于RIP）")]),t._v(" "),a("li",[t._v("metric最小")])])]),t._v(" "),a("li",[t._v("若匹配直连路由，网络层封装 src ip 和 des ip，链路层封装 des ip 对应 mac （arp获得）")]),t._v(" "),a("li",[t._v("若匹配非直连路由（默认路由），网络层封装 src ip 和 des ip，链路层封装下一跳 ip 对应 mac （arp获得）")]),t._v(" "),a("li",[t._v("若无匹配，丢弃报文，并向 src ip 返回目标不可达 ICMP报文")])])])]),t._v(" "),a("h2",{attrs:{id:"arp表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arp表"}},[t._v("#")]),t._v(" arp表")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ arp\nAddress                  HWtype  HWaddress           Flags Mask            Iface\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(".2.2                 ether   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("52")]),t._v(":54:00:12:35:02   C                     enp0s3\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".56.1             ether   0a:00:27:00:00:05   C                     enp0s8\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("169.254")]),t._v(".169.254                  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("incomplete"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                              enp0s3\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h2",{attrs:{id:"arp过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arp过程"}},[t._v("#")]),t._v(" arp过程")]),t._v(" "),a("ol",[a("li",[t._v("有 ip：mac 对应直接返回")]),t._v(" "),a("li",[t._v("否则\n"),a("ol",[a("li",[t._v("广播查询ip所对应的mac")]),t._v(" "),a("li",[t._v("被广播的主机收到该查询后\n"),a("ol",[a("li",[t._v("若ip匹配则返回自己对应网卡的mac")]),t._v(" "),a("li",[t._v("否则丢弃该查询")])])]),t._v(" "),a("li",[t._v("将查询结果缓存至arp表")])])]),t._v(" "),a("li",[t._v("arp表项具有时间限制，会被定时清理")])]),t._v(" "),a("h2",{attrs:{id:"浏览器中输入后的过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器中输入后的过程"}},[t._v("#")]),t._v(" 浏览器中输入后的过程")]),t._v(" "),a("ol",[a("li",[t._v("判断是否是url或是搜索")]),t._v(" "),a("li",[t._v("构造http请求")]),t._v(" "),a("li",[t._v("封装tcp\n"),a("ol",[a("li",[t._v("src port随机，des port为80/443")])])]),t._v(" "),a("li",[t._v("封装ip\n"),a("ol",[a("li",[t._v("src ip为本机ip\n"),a("ol",[a("li",[t._v("若有多个网卡（ip）根据出口选择网卡（路由表），src ip为对应网卡ip")])])]),t._v(" "),a("li",[t._v("des ip由dns获取：浏览器缓存 -> 操作系统缓存 -> 运营商缓存 ->递归/迭代查询")])])]),t._v(" "),a("li",[t._v("封装链路\n"),a("ol",[a("li",[t._v("在arp表中，根据ip查询mac")]),t._v(" "),a("li",[t._v("src mac 为网卡地址，des mac为下一跳ip对应的网络设备mac")])])]),t._v(" "),a("li",[t._v("网卡发送\n"),a("ol",[a("li",[t._v("驱动程序将MAC包拷贝到网卡内部的缓存区")]),t._v(" "),a("li",[t._v("网卡对MAC包添加头部同步信息和CRC校验，再次封装成物理帧，然后丢到网线上")])])]),t._v(" "),a("li",[t._v("网卡接受\n"),a("ol",[a("li",[t._v("网卡检查MAC包内的目的MAC地址信息，和本网卡的MAC地址是否一致？不一致，抛弃")]),t._v(" "),a("li",[t._v("网卡将MAC帧拷贝到网卡内部的缓冲区，触发中断")]),t._v(" "),a("li",[t._v("驱动程序通过中断，将MAC包拷贝到系统中，构建sk_buff，告诉上层")]),t._v(" "),a("li",[t._v("上层继续解析（可能ip非本机，继续转发）")])])]),t._v(" "),a("li",[t._v("浏览器最终接受响应并渲染")])]),t._v(" "),a("h2",{attrs:{id:"io复用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#io复用"}},[t._v("#")]),t._v(" io复用")]),t._v(" "),a("ol",[a("li",[t._v("IO模型"),a("img",{attrs:{src:"imgnet/iomultiplex1.png",alt:"io multiplex"}}),t._v(" "),a("img",{attrs:{src:"imgnet/iomultiplex2.png",alt:"io multiplex"}})])]),t._v(" "),a("h2",{attrs:{id:"select-poll-epoll"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#select-poll-epoll"}},[t._v("#")]),t._v(" select poll epoll")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_CLR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ISSET")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_SET")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FD_ZERO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd_set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("select")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nfds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("readfds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("writefds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("exceptfds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("timeval")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("timeout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pollfd")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* file descriptor */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" events"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* requested events */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" revents"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* returned events */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pollfd")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nfds_t nfds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" timeout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" epoll_data "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),t._v(" u32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint64_t")]),t._v(" u64"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" epoll_data_t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),t._v(" events"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Epoll events */")]),t._v("\n  epoll_data_t data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* User data variable */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_create1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_ctl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" epfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" op"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_wait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" epfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("events"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxevents"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n               "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" timeout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br")])]),a("ol",[a("li",[t._v("select\n"),a("ol",[a("li",[t._v("流程\n"),a("ol",[a("li",[t._v("定义一个fd_set")]),t._v(" "),a("li",[t._v("FD_ZERO()清空")]),t._v(" "),a("li",[t._v("FD_SET()添加listen_fd（bind，listen）")]),t._v(" "),a("li",[t._v("select()其中nfds=maxfd+1")]),t._v(" "),a("li",[t._v("select返回后遍历，判断FD_ISSET()；若是listen_fd，FD_SET添加新accept()的fd；若是其fd他则读取数据")]),t._v(" "),a("li",[t._v("select返回后，会将之前已加入fd_set但无事件发生的fd清空，每次select前fd都需重新加入")])])])])]),t._v(" "),a("li",[t._v("poll\n"),a("ol",[a("li",[t._v("流程\n"),a("ol",[a("li",[t._v("获取listen_fd")]),t._v(" "),a("li",[t._v("建立pollfd数组，用于存放client连接关心的events，将listen_fd加入数组并设置events为POLLIN")]),t._v(" "),a("li",[t._v("poll()")]),t._v(" "),a("li",[t._v("poll返回后遍历，若是listen_fd则accept添加一个fd，并设置相应events（POLLIN）；若是其他fd则根据revents处理")])])])])]),t._v(" "),a("li",[t._v("epoll\n"),a("ol",[a("li",[t._v("流程\n"),a("ol",[a("li",[t._v("获取listen_fd")]),t._v(" "),a("li",[t._v("epoll_create()创建epollfd")]),t._v(" "),a("li",[t._v("epoll_ctl()将listen_fd加入且对应epoll_event为EPOLLIN")]),t._v(" "),a("li",[t._v("epoll_wait()")]),t._v(" "),a("li",[t._v("epoll_wait返回后，仅发生events的fd会被返回在events中，遍历即可")])])])])]),t._v(" "),a("li",[t._v("三者区别\n"),a("ol",[a("li",[t._v("select最大描述符一般1024，poll epoll 是进程可打开的最大fd数量")]),t._v(" "),a("li",[t._v("select poll都需要循环遍历O(n)，epoll回调 O(1)")]),t._v(" "),a("li",[t._v("select poll仅有LT模式，epoll还有ET模式；LT与ET模式的区别为，LT模式在有事件时会一直返回，ET只返回一次；如同一时刻多个连接到达，使用ET模式时，需要用while包裹accept直到EAFAIN，否则只会有一个连接建立")]),t._v(" "),a("li",[t._v("epoll使用，mmap用户和内核共享epollfd，减少数据拷贝；红黑树存储fd；网卡驱动程序的callback向双向链表rd_list添加ep_item，epoll_wait根据双链表是否非空返回")])])])]),t._v(" "),a("h2",{attrs:{id:"socket编程tcp选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#socket编程tcp选项"}},[t._v("#")]),t._v(" socket编程tcp选项")]),t._v(" "),a("h2",{attrs:{id:"惊群效应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#惊群效应"}},[t._v("#")]),t._v(" 惊群效应")]),t._v(" "),a("ol",[a("li",[t._v("惊群效应指当多线程或多进程同时阻塞等待同一个事件时，如果这个事件发生，那么所有线程会被唤醒，但仅有一个线程获得控制权，其他线程重新进入等待")]),t._v(" "),a("li",[t._v("惊群效应的问题；线程的无效调度，上下文切换影响性能")]),t._v(" "),a("li",[t._v("解决；加锁")]),t._v(" "),a("li",[t._v("accept()无惊群")]),t._v(" "),a("li",[t._v("epoll()有惊群")])]),t._v(" "),a("h2",{attrs:{id:"大量time-wait"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大量time-wait"}},[t._v("#")]),t._v(" 大量time_wait")]),t._v(" "),a("ol",[a("li",[t._v("主动关闭方才具有time_wait状态")]),t._v(" "),a("li",[t._v("可能原因是客户端频繁的连接和断开")]),t._v(" "),a("li",[t._v("大量time_wait会占用，内存，cpu，src port，fd")])]),t._v(" "),a("h2",{attrs:{id:"大量close-wait"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大量close-wait"}},[t._v("#")]),t._v(" 大量close_wait")]),t._v(" "),a("ol",[a("li",[t._v("被动关闭方才具有close_wait状态")]),t._v(" "),a("li",[t._v("可能原因是socket关闭不及时")])]),t._v(" "),a("h2",{attrs:{id:"reactor和proactor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reactor和proactor"}},[t._v("#")]),t._v(" reactor和proactor")]),t._v(" "),a("ol",[a("li",[t._v("reactor\n"),a("ol",[a("li",[t._v("读操作\n"),a("ol",[a("li",[t._v("应用程序注册读就绪事件和相关联的事件处理器（fd,callback）")]),t._v(" "),a("li",[t._v("事件分离器等待事件的发生（epoll）")]),t._v(" "),a("li",[t._v("当发生读就绪事件的时候，事件分离器调用第一步注册的事件处理器（thread use callback）")]),t._v(" "),a("li",[t._v("事件处理器首先执行实际的读取操作，然后根据读取到的内容进行进一步的处理（read and process）")])])]),t._v(" "),a("li",[t._v("写操作\n"),a("ol",[a("li",[t._v("同上")])])])])]),t._v(" "),a("li",[t._v("proactor\n"),a("ol",[a("li",[t._v("读操作\n"),a("ol",[a("li",[t._v("应用程序初始化一个异步读取操作，然后注册相应的事件处理器，此时事件处理器不关注读取就绪事件，而是关注读取完成事件，这是区别于Reactor的关键")]),t._v(" "),a("li",[t._v("事件分离器等待读取操作完成事件")]),t._v(" "),a("li",[t._v("在事件分离器等待读取操作完成的时候，操作系统调用内核线程完成读取操作（异步IO都是操作系统负责将数据读写到应用传递进来的缓冲区供应用程序操作，操作系统扮演了重要角色），并将读取的内容放入用户传递过来的缓存区中。这也是区别于Reactor的一点，Proactor中，应用程序需要传递缓存区")]),t._v(" "),a("li",[t._v("事件分离器捕获到读取完成事件后，激活应用程序注册的事件处理器，事件处理器直接从缓存区读取数据，而不需要进行实际的读取操作")])])]),t._v(" "),a("li",[t._v("写操作\n"),a("ol",[a("li",[t._v("同上")])])])])]),t._v(" "),a("li",[t._v("Reactor和Proactor模式的主要区别就是真正的读取和写入操作是有谁来完成的，Reactor中需要应用程序自己读取或者写入数据，而Proactor模式中，应用程序不需要进行实际的读写过程，它只需要从缓存区读取或者写入即可，操作系统会读取缓存区或者写入缓存区到真正的IO设备")])])])}),[],!1,null,null,null);s.default=i.exports}}]);